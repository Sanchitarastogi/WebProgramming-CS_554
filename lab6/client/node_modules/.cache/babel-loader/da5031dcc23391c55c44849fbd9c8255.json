{"ast":null,"code":"import _classCallCheck from \"/Users/arpitrastogi/Desktop/web Prgrammig2/lab6/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/arpitrastogi/Desktop/web Prgrammig2/lab6/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/arpitrastogi/Desktop/web Prgrammig2/lab6/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/arpitrastogi/Desktop/web Prgrammig2/lab6/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/arpitrastogi/Desktop/web Prgrammig2/lab6/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/arpitrastogi/Desktop/web Prgrammig2/lab6/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/arpitrastogi/Desktop/web Prgrammig2/lab6/client/src/components/Todos/EditTodos.js\";\nimport React, { Component } from 'react'; //Import Query from react-apollo\n\nimport { Query, Mutation } from 'react-apollo';\nimport ReactModal from 'react-modal'; //Import the file where my query constants are defined\n\nimport queries from '../../queries'; //For react-Todo\n\nReactModal.setAppElement('#root');\nvar customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    width: '50%',\n    border: '1px solid #28547a',\n    borderRadius: '4px'\n  }\n};\n/* The React Apollo package grants access to a Query component, which takes a query as prop and executes it when its rendered. \nThat’s the important part: it executes the query when it is rendered. \nIt uses React’s render props pattern, using a child as a function implementation where you can access the result of the query as an argument.\n*/\n\nvar EditTodo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditTodo, _Component);\n\n  function EditTodo(props) {\n    var _this;\n\n    _classCallCheck(this, EditTodo);\n\n    //console.log(this.props.todo);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditTodo).call(this, props));\n    debugger;\n    _this.state = {\n      showEditTodo: _this.props.isOpen,\n      todo: _this.props.todo\n    };\n    _this.handleCloseEditTodo = _this.handleCloseEditTodo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(EditTodo, [{\n    key: \"handleCloseEditTodo\",\n    value: function handleCloseEditTodo() {\n      this.setState({\n        showEditTodo: false,\n        todo: null\n      });\n      this.props.handleClose();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var title;\n      var completed;\n      var userId;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(ReactModal, {\n        name: \"editTodo\",\n        isOpen: this.state.showEditTodo,\n        contentLabel: \"Edit todo\",\n        style: customStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Mutation, {\n        mutation: queries.EDIT_TODO,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, function (editTodo, _ref) {\n        var data = _ref.data;\n        return React.createElement(\"form\", {\n          className: \"form\",\n          id: \"add-todo\",\n          onSubmit: function onSubmit(e) {\n            console.log(title.value);\n            console.log(completed.value);\n            console.log(parseInt(userId.value));\n            e.preventDefault();\n            editTodo({\n              variables: {\n                id: _this2.props.todo.id,\n                title: title.value,\n                completed: completed.value === 'true',\n                userId: parseInt(userId.value)\n              }\n            });\n            title.value = '';\n            completed.value = '';\n            userId.value = '1';\n\n            _this2.setState({\n              showEditTodo: false\n            });\n\n            alert('Todo Updated');\n\n            _this2.props.handleClose();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, \"Title:\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          ref: function ref(node) {\n            title = node;\n          },\n          defaultValue: _this2.props.todo.title,\n          autoFocus: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, \"Completed:\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          ref: function ref(node) {\n            debugger;\n            completed = node;\n          },\n          defaultValue: _this2.props.todo.completed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }), React.createElement(Query, {\n          query: queries.GET_USERS,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, function (_ref2) {\n          var data = _ref2.data;\n          var users = data.users;\n\n          if (!users) {\n            return null;\n          }\n\n          return React.createElement(\"div\", {\n            className: \"form-group\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120\n            },\n            __self: this\n          }, \"user:\", React.createElement(\"select\", {\n            defaultValue: _this2.props.todo.user.id,\n            className: \"form-control\",\n            ref: function ref(node) {\n              userId = node;\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          }, users.map(function (user) {\n            return React.createElement(\"option\", {\n              key: user.id,\n              value: user.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 130\n              },\n              __self: this\n            }, user.name);\n          }))));\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"button add-button\",\n          type: \"submit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"Update todo\"));\n      }), React.createElement(\"button\", {\n        className: \"button cancel-button\",\n        onClick: this.handleCloseEditTodo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Cancel\")));\n    }\n  }]);\n\n  return EditTodo;\n}(Component);\n\nexport default EditTodo;","map":{"version":3,"sources":["/Users/arpitrastogi/Desktop/web Prgrammig2/lab6/client/src/components/Todos/EditTodos.js"],"names":["React","Component","Query","Mutation","ReactModal","queries","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","width","border","borderRadius","EditTodo","props","state","showEditTodo","isOpen","todo","handleCloseEditTodo","bind","setState","handleClose","title","completed","userId","EDIT_TODO","editTodo","data","e","console","log","value","parseInt","preventDefault","variables","id","alert","node","GET_USERS","users","user","map","name"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n//Import Query from react-apollo\nimport {Query, Mutation} from 'react-apollo';\nimport ReactModal from 'react-modal';\n\n//Import the file where my query constants are defined\nimport queries from '../../queries';\n\n//For react-Todo\nReactModal.setAppElement('#root');\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n        width: '50%',\n        border: '1px solid #28547a',\n        borderRadius: '4px'\n    }\n};\n\n/* The React Apollo package grants access to a Query component, which takes a query as prop and executes it when its rendered. \nThat’s the important part: it executes the query when it is rendered. \nIt uses React’s render props pattern, using a child as a function implementation where you can access the result of the query as an argument.\n*/\nclass EditTodo extends Component {\n    constructor(props) {\n        //console.log(this.props.todo);\n        super(props);\n        debugger\n        this.state = {\n            showEditTodo: this.props.isOpen,\n            todo: this.props.todo\n        };\n        this.handleCloseEditTodo = this.handleCloseEditTodo.bind(this);\n    }\n\n    handleCloseEditTodo() {\n        this.setState({showEditTodo: false, todo: null});\n        this.props.handleClose();\n    }\n\n    render() {\n        let title;\n        let completed;\n        let userId;\n        return (\n            <div>\n                {/*Edit todo Todo - NOT DONE YET */}\n                <ReactModal\n                    name='editTodo'\n                    isOpen={this.state.showEditTodo}\n                    contentLabel='Edit todo'\n                    style={customStyles}>\n                    <Mutation mutation={queries.EDIT_TODO}>\n                        {(editTodo, {data}) => (\n                            <form\n                                className='form'\n                                id='add-todo'\n                                onSubmit={(e) => {\n                                    console.log(title.value);\n                                    console.log(completed.value);\n                                    console.log(parseInt(userId.value));\n                                    e.preventDefault();\n                                    editTodo({\n                                        variables: {\n                                            id: this.props.todo.id,\n                                            title: title.value,\n                                            completed: completed.value==='true',\n                                            userId: parseInt(userId.value)\n                                        }\n                                    });\n                                    title.value = '';\n                                    completed.value = '';\n                                    userId.value = '1';\n                                    this.setState({showEditTodo: false});\n                                    alert('Todo Updated');\n                                    this.props.handleClose();\n                                }}>\n                                <div className='form-group'>\n                                    <label>\n                                        Title:\n                                        <br />\n                                        <input\n                                            ref={(node) => {\n                                                title = node;\n                                            }}\n                                            defaultValue={this.props.todo.title}\n                                            autoFocus={true}\n                                        />\n                                    </label>\n                                </div>\n                                <br />\n                                <div className='form-group'>\n                                    <label>\n                                        Completed:\n                                        <br />\n                                        <input\n                                            ref={(node) => {\n                                                debugger;\n                                                completed = node;\n                                            }}\n                                            defaultValue={this.props.todo.completed}\n                                        />\n                                    </label>\n                                </div>\n                                <br />\n\n                                <Query query={queries.GET_USERS}>\n                                    {({data}) => {\n                                        const {users} = data;\n                                        if (!users) {\n                                            return null;\n                                        }\n                                        return (\n                                            <div className='form-group'>\n                                                <label>\n                                                    user:\n                                                    <select\n                                                        defaultValue={this.props.todo.user.id}\n                                                        className='form-control'\n                                                        ref={(node) => {\n                                                            userId = node;\n                                                        }}>\n                                                        {users.map((user) => {\n                                                            return (\n                                                                <option key={user.id} value={user.id}>\n                                                                    {user.name}\n                                                                  \n                                                                </option>\n                                                            );\n                                                        })}\n                                                    </select>\n                                                </label>\n                                            </div>\n                                        );\n                                    }}\n                                </Query>\n                                <br />\n                                <br />\n                                <button className='button add-button' type='submit'>\n                                    Update todo\n                                </button>\n                            </form>\n                        )}\n                    </Mutation>\n                    <button className='button cancel-button' onClick={this.handleCloseEditTodo}>\n                        Cancel\n                    </button>\n                </ReactModal>\n            </div>\n        );\n    }\n}\n\nexport default EditTodo;"]},"metadata":{},"sourceType":"module"}