{"ast":null,"code":"var _jsxFileName = \"/Users/arpitrastogi/Desktop/web Prgrammig2/lab6/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport App from './components/App';\nvar BASE_URL = 'http://localhost:4000';\nvar httpLink = new HttpLink({\n  uri: BASE_URL,\n  onError: function onError(_ref) {\n    var networkError = _ref.networkError,\n        graphQLErrors = _ref.graphQLErrors;\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n});\nvar cache = new InMemoryCache(); //Finally, you can use both instantiated configurations, the link and the cache, to create the instance of the Apollo Client\n\nvar client = new ApolloClient({\n  link: httpLink,\n  cache: cache\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n})), document.getElementById('root'));\n\nif (module.hot) {\n  module.hot.accept();\n}","map":{"version":3,"sources":["/Users/arpitrastogi/Desktop/web Prgrammig2/lab6/client/src/index.js"],"names":["React","ReactDOM","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","App","BASE_URL","httpLink","uri","onError","networkError","graphQLErrors","console","log","cache","client","link","render","document","getElementById","module","hot","accept"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAAQC,cAAR,QAA6B,cAA7B;AACA,SAAQC,YAAR,QAA2B,eAA3B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA,IAAMC,QAAQ,GAAG,uBAAjB;AAEA,IAAMC,QAAQ,GAAG,IAAIJ,QAAJ,CAAa;AAC1BK,EAAAA,GAAG,EAAEF,QADqB;AAE1BG,EAAAA,OAAO,EAAE,uBAAmC;AAAA,QAAjCC,YAAiC,QAAjCA,YAAiC;AAAA,QAAnBC,aAAmB,QAAnBA,aAAmB;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACH;AALyB,CAAb,CAAjB;AAQA,IAAMI,KAAK,GAAG,IAAIV,aAAJ,EAAd,C,CAEA;;AACA,IAAMW,MAAM,GAAG,IAAIb,YAAJ,CAAiB;AAC5Bc,EAAAA,IAAI,EAAET,QADsB;AAE5BO,EAAAA,KAAK,EAALA;AAF4B,CAAjB,CAAf;AAKAd,QAAQ,CAACiB,MAAT,CACI,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAIIG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJJ;;AAOA,IAAIC,MAAM,CAACC,GAAX,EAAgB;AACZD,EAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX;AACH","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ApolloProvider} from 'react-apollo';\nimport {ApolloClient} from 'apollo-client';\nimport {HttpLink} from 'apollo-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport App from './components/App';\n\nconst BASE_URL = 'http://localhost:4000';\n\nconst httpLink = new HttpLink({\n    uri: BASE_URL,\n    onError: ({networkError, graphQLErrors}) => {\n        console.log('graphQLErrors', graphQLErrors);\n        console.log('networkError', networkError);\n    }\n});\n\nconst cache = new InMemoryCache();\n\n//Finally, you can use both instantiated configurations, the link and the cache, to create the instance of the Apollo Client\nconst client = new ApolloClient({\n    link: httpLink,\n    cache\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\nif (module.hot) {\n    module.hot.accept();\n}\n"]},"metadata":{},"sourceType":"module"}